# Azure Python App Service CI/CD with Terraform

Flask web app deployed to **Azure App Service (Linux, Python 3.12)** via **Azure DevOps**; infrastructure provisioned with **Terraform**; quality checks via **SonarCloud**.

---

## Live & Quality

- **Live app:** https://proj7-web.azurewebsites.net
- **SonarCloud:** https://sonarcloud.io/project/overview?id=ravi-on-cloud_proj7-web-public

---

## Architecture

![Architecture](diagram.png)

- Terraform → Resource Group, **Linux** App Service Plan (**B1**), **Python 3.12** Web App  
- Azure DevOps (YAML) → Build (SonarCloud) → Package → **Deploy to App Service (Linux)**  
- Flask app (`app.py`, templates) served with gunicorn (auto-detected by Oryx)

---

## What we did

1. **Terraform** created RG, Linux Plan (B1), Python 3.12 Web App.  
2. **Azure DevOps pipeline** (Ubuntu agent) ran SonarCloud, zipped the app, and **deployed** to App Service (Linux).  
3. **Flask app** renders `welcome.html` and `registration.html`.  
4. **Verified**: pipeline green, site reachable, SonarCloud analysis visible.

---

## Screenshots

| Web App | Azure DevOps |
|---|---|
| ![Web App](screenshots/webapp.png) | ![Azure DevOps](screenshots/azuredevops.png) |

| Azure Portal | SonarCloud |
|---|---|
| ![Azure Portal](screenshots/azureportal.png) | ![SonarCloud](screenshots/sonarqube.png) |

---

## Repository layout

├─ Infra/
│ ├─ main.tf
│ ├─ variables.tf
│ ├─ outputs.tf
│ └─ terraform.tfvars
├─ .azure-pipelines/
│ └─ pipeline.yml
├─ app.py
├─ requirements.txt
├─ templates/
│ ├─ welcome.html
│ └─ registration.html
├─ screenshots/
│ ├─ webapp.png
│ ├─ azuredevops.png
│ ├─ azureportal.png
│ └─ sonarqube.png
├─ diagram.png
└─ .gitignore


---

## License

MIT
